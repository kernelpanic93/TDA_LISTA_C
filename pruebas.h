#ifndef PRUEBAS_H_
#define PRUEBAS_H_

int elemento_es_igual_a(void *, void *);
bool numero_es_negativo(void *, void *);
bool contar_elementos(void*,void *);

void creo_una_lista_y_es_valida();
void prueba_funcion_lista_vacia_con_una_lista_nula_y_no_explota();
void prueba_que_una_lista_recien_creada_esta_vacia_y_tiene_cero_elementos();

void no_se_puede_insertar_en_un_ninguna_posicion_de_una_lista_inexistente();
void prueba_insercion_de_una_lista_recien_creada_y_verifica_que_el_tamanio_crece();	
void se_inserta_un_elemento_en_una_lista_vacia_y_verifica_que_ese_elemento_sea_el_que_se_inserto();
void se_puede_insertar_NULL_como_elemento_en_una_lista_puedo_devolver_ese_elemento_nulo();
void se_insertan_elementos_y_se_verifica_que_el_primer_elemento_insertado_y_el_ultimo_insertado_esten_en_correcta_posicion();
void se_insertan_varios_elementos_antes_del_ultimo_elemento_en_una_lista_no_vacia_y_se_verifica_que_el_ultimo_elemento_sigue_siendo_el_ultimo();
void se_insertan_varios_elementos_en_ultima_posicion_de_una_lista_no_vacia_y_se_verifica_que_el_ultimo_elemento_sigue_siendo_el_ultimo();
void se_inserta_un_elemento_en_una_posicion_mayor_al_tamanio_de_una_lista_no_vacia_y_se_verifica_que_lo_inserta_en_ultima_posicion();
void se_insertan_varios_elementos_al_principio_de_una_lista_y_el_ultimo_insertado_en_primera_posicion_queda_en_la_primera_posicion();
void se_insertan_varios_elementos_en_distintas_posiciones_de_la_lista_y_al_recorrerla_cada_elemento_insertado_quedo_en_posicion_correcta();

void remover_elemento_de_lista_inexistente();
void remover_elemento_de_lista_vacia();
void remover_un_elemento_de_lista_de_un_elemento_deja_la_lista_vacia_y_me_devuelve_el_elemento();
void remover_el_ultimo_elemento_de_una_lista_de_tres_elementos_y_el_segundo_elemento_ahora_es_el_ultimo();
void remover_el_primer_elemento_de_una_lista_de_tres_elementos_y_el_segundo_elemento_ahora_es_el_primero();
void remover_una_posicion_mas_grande_que_el_tamanio_de_la_lista_remueve_la_ultima_posicion();

void no_puedo_buscar_elementos_en_una_lista_que_no_existe_o_que_esta_vacia();
void no_puedo_buscar_elementos_que_estan_fuera_del_rango_de_mi_lista();
void verificar_que_en_una_lista_de_un_elemento_el_primero_y_el_ultimo_son_el_mismo();

void no_puedo_buscar_elementos_en_una_lista_inexistente();
void buscar_un_elemento_con_una_funcion_nula_me_devuelve_null();
void buscar_en_una_lista_vacia_devuelve_null();

void no_puedo_crear_un_iterador_de_una_lista_inexistente();
void puedo_crear_un_iterador_con_una_lista_vacia();
void iterar_una_lista_vacia_me_devuelve_cero();
void itero_el_siguiente_elemento_a_la_ultima_posicion_de_la_lista_y_devuelve_null();
void lista_con_n_elementos_recorre_los_n_elementos();
void iterar_todos_los_elementos_de_lista_con_it_interno_me_devuelve_todos_los_elementos_iterados();	
void al_iterar_la_lista_con_el_it_interno_devuelve_todos_los_elementos_iterados_aunque_no_cumplan_con_la_condicion_de_la_funcion();

void creo_una_pila_y_verifico_que_esta_vacia_y_que_no_tiene_tope();
void apilo_varios_elementos_y_el_tamanio_de_la_pila_coincide_con_la_cantidad_de_elementos_que_inserte();
void desapilo_y_el_tamanio_de_la_pila_decrece_hasta_que_no_hay_mas_elementos_y_el_tope_es_null();
void apilar_varias_veces_y_verificar_tope_cada_vez_y_desapilar_varias_veces_y_verificar_tope_cada_vez();

void creo_una_cola_y_verifico_que_esta_vacia_y_que_tiene_tamanio_cero();
void encolo_Y_desencolo_elementos_y_verifico_que_el_tamanio_de_la_cola_crece_y_decrece();
void encolo_y_desencolo_varios_elementos_y_verifico_que_el_frente_fue_el_ultimo_elemento_encolado();
#endif